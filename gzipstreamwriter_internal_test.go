package gzipstreamwriter

import (
	"bytes"
	"hash/crc32"
	"testing"
)

// Originally generated by Copilot, and modified to be an actual test.
func FuzzCRC32Combine(f *testing.F) {
	f.Add([]byte{}, []byte{})
	f.Add([]byte{'A'}, []byte{'B'})
	f.Add([]byte{0x12, 0x34, 0x56, 0x78}, []byte{0x9a, 0xbc, 0xde, 0xf0})
	f.Add(bytes.Repeat([]byte{0x12, 0x34, 0x56, 0x78}, 16), bytes.Repeat([]byte{0x9a, 0xbc, 0xde, 0xf0}, 16))

	f.Fuzz(func(t *testing.T, frontBytes []byte, backBytes []byte) {
		frontCRC := crc32.ChecksumIEEE(frontBytes)
		backCRC := crc32.ChecksumIEEE(backBytes)
		expectedCRC := crc32.ChecksumIEEE(append(frontBytes, backBytes...))
		length := len(backBytes)

		if resultCRC := crc32Combine(frontCRC, backCRC, length); resultCRC != expectedCRC {
			t.Errorf("expected CRC: %d, got CRC: %d", expectedCRC, resultCRC)
		}
	})
}
